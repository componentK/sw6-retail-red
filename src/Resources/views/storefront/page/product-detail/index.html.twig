{% sw_extends '@Storefront/storefront/page/product-detail/index.html.twig' %}

{% set productCodeMapping = config('RetailRedOmniEnablement.config.productCodeMapping') %}

{% block base_head %}
    {{ parent() }}

    {% if shopware.config.RetailRedOmniEnablement.config.displayType != 'disabled' %}
    <script type='text/javascript' src='https://cdn.retail.red/omni/retailred-storefront-library-v1.js'></script>
    <script type="text/javascript">
        try {
            window.addEventListener('load', function () {
                var localization = {{ config('RetailRedOmniEnablement.config.translations')|raw|default('null') }} || {};
                localization.countries = {{ config('RetailRedOmniEnablement.config.countries')|default(['de'])|json_encode|raw }};
                var variants = {{ page.product.variation|default([])|json_encode|raw }};
                var product = {{ page.product|json_encode|raw }}

                var retailred = window.RetailRedStorefront.create({
                    apiKey: '{{ config('RetailRedOmniEnablement.config.apiKey') }}',
                    apiStage: '{{ config('RetailRedOmniEnablement.config.apiStage') }}',
                    useGeolocationImmediately: {{ config('RetailRedOmniEnablement.config.useGeolocationImmediately') | json_encode }},
                    browserHistory: {{ config('RetailRedOmniEnablement.config.browserHistory') | json_encode }},
                    testMode: {{ config('RetailRedOmniEnablement.config.testMode') | json_encode }},
                    unitSystem: '{{ config('RetailRedOmniEnablement.config.unitSystem') }}',
                    localization: localization,
                    inventory: {
                        hideNumber: {{ config('RetailRedOmniEnablement.config.inventoryHideNumber') | json_encode }},
                        showExactUntil: {{ config('RetailRedOmniEnablement.config.inventoryShowExactUntil') |default('null') }},
                        showLowUntil: {{ config('RetailRedOmniEnablement.config.inventoryShowLowUntil') |default('null') }},
                    },
                    legal: {
                        terms: {{ config('RetailRedOmniEnablement.config.termsLink') |default(null)|json_encode }},
                        privacy: {{ config('RetailRedOmniEnablement.config.privacyLink') |default(null)|json_encode }},
                    },
                    customer: {
                        code: '{{ context.customer.customerNumber }}',
                        firstName: '{{ context.customer.firstName }}',
                        lastName: '{{ context.customer.lastName }}',
                        phone: '{{ context.customer.defaultBillingAddress.phoneNumber }}',
                        emailAddress: '{{ context.customer.email }}',
                    },
                    product: {
                        code: '{% if productCodeMapping == 'ean' %}{{ page.product.ean }}{% else %}{{ page.product.productNumber }}{% endif %}',
                        name: '{{ page.product.translated.name }}',
                        quantity: {{ page.product.calculatedPrice.quantity }},
                        imageUrl: '{{ page.product.cover.media.url }}',
                        price: {{ page.product.calculatedPrice.unitPrice }},
                        currencyCode: '{{ context.currency.isoCode }}',
                        options: variants.map(function (variant) {
                            if (!product.sortedProperties) {
                                return {
                                    code: variant.group,
                                    name: variant.group,
                                    value: {
                                        code: variant.option,
                                        name: variant.option
                                    }
                                }
                            }
                            const sortedProperty = product.sortedProperties.find(function(sortedProperty) {
                                return sortedProperty.name === variant.group
                            })

                            const variantDetails = sortedProperty.options.find(function(sortedPropertyOption) {
                                return variant.option === sortedPropertyOption.name
                            })

                            return {
                                code: sortedProperty.id,
                                name: sortedProperty.name,
                                value: {
                                    code: variantDetails.id,
                                    name: variantDetails.name
                                }
                            }
                        }).filter(Boolean)
                    },
                });

                {% if config('RetailRedOmniEnablement.config.displayType') == 'reserveButton' %}
                    retailred.renderReserveButton('#rr-reserve-button')
                {% elseif config('RetailRedOmniEnablement.config.displayType') == 'liveInventory' %}
                    retailred.renderLiveInventory('#rr-live-inventory', {
                      variant: '{{ config('RetailRedOmniEnablement.config.renderLiveInventoryMode') }}'
                    });
                {% endif %}

                $('.product-detail-quantity-select').change(function() {
                    retailred.updateConfig({
                        product: {
                            quantity: $(this).val(),
                        },
                    });
                });
            });
        } catch (e) {
            console.error(e);
        }
    </script>
    {% endif %}
{% endblock %}